<<소숫점 처리 주의사항>>

요약 : 
우리가 10진수로 입력하면 컴퓨터는 2진수로 변환하여 계산을 합니다.
정수일 경우에는 상관이 없지만 소수를 계산하게 되면 어떤 경우에는 컴퓨터가 
2진수로 변환시 무한소수로 가게 되는 경우가 있어 100% 정확하게 표현할 수가 없습니다.



보기에는 x1과 x2가 같아보이지만, == 연산자를 썼을 때는 거짓, != 연산자를 썼을 때는 참이 나옵니다.

이는 정밀도(precision) 때문입니다.

(참고링크: https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)*

우리가 10진수로 입력하면 컴퓨터는 2진수로 변환하여 계산을 합니다.

정수일 경우에는 상관이 없지만 소수를 계산하게 되면 어떤 경우에는 

컴퓨터가 2진수로 변환시 무한소수로 가게 되는 경우가 있어 100% 정확하게 표현할 수가 없습니다.

따라서 두 벡터 사이에 차이가 생겨 값이 같지 않다고 나오게 됩니다.



all.equal()을 써서 tolerance를 0으로 설정하게 되면 두 값의 차이가 
나오게 되는데 위의 결과를 보시면 알 수 있듯이 difference가 존재함을 알 수 있습니다.



소수 때문에 == 연산자가 제대로 작동하지 않을 때 대신해서 쓸 수 있는 코드가 있습니다.

 identical(all.equal(x1, x2), TRUE)

identical() 코드는 두 자료가 정확하게 같은지 test하는 것으로, 어떤 자료 유형이든지 사용 가능합니다.

다만 identical() 자체도 정확하게 값이 같아야 결과가 나오므로, 코드 안에 다시 all.equal()을 사용했습니다.

all.equal()은 1.5e-8 차이 이내로 거의 비슷한 값은 같다라고 인식하게 해주므로 identical() 내부에 넣어서 쓰면, 

x1과 x2는 같다는 논리적으로 참인 결과가 나오게 됩니다.



비교 연산자 자체는 큰 어려운 점이 없으나 자료 내에 소수가 있을 경우에는 

==이나 != 연산자가 논리적인 결과값이 안 나올 수 있다는 점만을 유의하면 되겠습니다.